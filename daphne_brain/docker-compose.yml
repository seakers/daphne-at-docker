version: '3.8'
services:
  db:
    container_name: daphne-maars-db
    image: postgres
    restart: unless-stopped
    shm_size: 128mb
    environment:
      - POSTGRES_DB=daphne
      - POSTGRES_USER=daphne
      - POSTGRES_PASSWORD=daphnetest
    ports:
      - '5432:5432'
    volumes:
      - ./pg_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - daphne-network1
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  redis:
    image: redis:latest
    container_name: daphne-maars-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    networks:
      - daphne-network1
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 5
  # nginx:
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   container_name: daphne-at-nginx
  #   depends_on:
  #     - frontend
  #     - backend
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
  #     - static_volume:/usr/share/nginx/html/static
  #     - ./daphne-at-interface/src/images:/usr/share/nginx/html/images
  #   networks:
  #     - daphne-network

  # backend:
  #   build:
  #     context: ./daphne_brain
  #   #command: "python manage.py migrate && python manage.py runserver 8000"
  #   container_name: daphne-at-backend
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #     redis:
  #       condition: service_healthy
  #   environment:
  #     - DJANGO_SETTINGS_MODULE=daphne_brain.settings
  #     - PYTHONUNBUFFERED=1
  #     # - DJANGO_ALLOWED_HOSTS=db
  #     # - POSTGRES_ENGINE=django.db.backends.postgresql
  #     - POSTGRES_DB=daphne
  #     - POSTGRES_USER=daphne
  #     - POSTGRES_PASSWORD=daphnetest
  #     - POSTGRES_HOST=db
  #     - POSTGRES_PORT=5432
  #   ports:
  #     - '8000:8000'
  #   volumes:
  #     - ./daphne_brain:/usr/src/app
  #     - static_volume:/usr/src/app/static
  #     - ./logs:/usr/src/app/logs
  #   networks:
  #     - daphne-network
  #   command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"

  # frontend:
  #   build:
  #     context: ./daphne-at-interface
  #   container_name: daphne-at-frontend
  #   depends_on:
  #     - backend
  #   ports:
  #     - '8080:8080'
  #   #command: npm run dev
  #   volumes:
  #     - ./daphne-at-interface:/usr/src/app
  #     - /usr/src/app/node_modules
  #   networks:
  #     - daphne-network
  #   command: npm run dev
networks:
  daphne-network1:
    driver: bridge
volumes:
  pgdata:
  static_volume:
